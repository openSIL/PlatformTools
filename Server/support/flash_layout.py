"""
*******************************************************************************
 Copyright (C) 2024 Advanced Micro Devices, Inc. All rights reserved.

*******************************************************************************
"""

import os
import re


def flash_layout_check():
    """!
    BIOS Flash layout sanity check

    exception   various
    """
    buildfile = os.path.join(os.environ["BUILD_OUTPUT"], "build.log")
    print("BIOS Flash Layout sanity check ...")

    fv_list = list()
    Overlap = False
    if os.path.exists(buildfile):
        with open(buildfile, "r") as build_file:
            for line in build_file:
                # Extract EDKII BIOS FV information from build.log
                if "Generate Region at Offset" in line:
                    fv_element = list()
                    start = int(re.findall(r"0x[0-9A-F]+", line.strip(), re.I)[0], 16)
                    size = int(
                        re.findall(r"0x[0-9A-F]+", build_file.readline(), re.I)[0], 16
                    )
                    end = start + size - 1
                    fv_element.append(start)
                    fv_element.append(end)
                    fv_element.append(size)
                    region_type = build_file.readline().split("=", 1)[1]
                    fv_element.append(region_type.strip())
                    if region_type.strip() == "FV":
                        # skip one line
                        build_file.readline()
                        fv_element.append(
                            build_file.readline()
                            .split("Generating", 1)[1]
                            .strip()
                            .split(" FV", 1)[0]
                            .strip()
                        )
                    else:
                        fv_element.append("")
                    fv_list.append(tuple(fv_element))
                # Extract PSP image build directory
                if "IMAGE:" in line:
                    if "Erasing" in line:
                        fv_element = list()
                        name = line.split("Erasing", 1)[1].split("--->", 1)[0].strip()
                        psp_fv = list(re.findall(r"0x[0-9A-F]+", line.strip(), re.I))
                        start = int(psp_fv[0], 16)
                        end = int(psp_fv[1], 16)
                        size = end - start + 1
                        fv_element.append(start)
                        fv_element.append(end)
                        fv_element.append(size)
                        fv_element.append("None")
                        fv_element.append(name)
                        fv_list.append(tuple(fv_element))

        fv_list.sort()
        print('#'*80)
        print("###\tFlash layout")
        print('#'*80)
        print("#\tStart\t\tEnd\t\tSize\t\tFV\tName")
        print('#'*80)
        for first, second in zip(fv_list[:-1], fv_list[1:]):
            (first_start, first_end, first_size, first_type, first_name) = first
            (second_start, second_end, second_size, second_type, second_name) = second
            print(
                "#\t0x{:08x}\t0x{:08x}\t0x{:08x}\t{}\t{}".format(
                    first_start, first_end, first_size, first_type, first_name
                )
            )
            # 'None' type are padding FV generated by build tools for empty space, hence ignore it
            if second_start in range(first_start, first_end) and second_type != "None":
                print(
                    "Error: FV {} range(0x{:08x} - 0x{:08x}) overlaps with FV {} range(0x{:08x} - 0x{:08x})".format(
                        second_name,
                        second_start,
                        second_end,
                        first_name,
                        first_start,
                        first_end,
                    )
                )
                Overlap = True
        print(
            "#\t0x{:08x}\t0x{:08x}\t0x{:08x}\t{}\t{}".format(
                second_start, second_end, second_size, second_type, second_name
            )
        )

        print('#'*80)
        if Overlap:
            print("Error: Sanity check failed:")
            exit (1)

        print("Done.")
